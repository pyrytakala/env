---
description: 
globs: 
alwaysApply: true
---
Project goals
- 
	
Architecture
- Frontend: React with TypeScript, Shadcn for styling, Zustand for state management, Vite for fast build tooling.
- Backend: Express server with TypeScript, Prisma ORM for Postgres database interaction, OpenRouter API for AI.
- Shared: Types and schemas stored in a shared directory for validation and type inference across both frontend and backend.
- Database: Postgres, managed using Prisma with migrations and schema definition.
- Deployment: Local development with no current Docker for the backend, focuses on direct server interaction for now.
- Authentication:

Key principles
- Use functional programming principles. Avoid class-based implementations.
- Prefer modularization and reusable code over duplication.
- Organize directories with lowercase and hyphenated names (e.g., `back/api-wrappers`).

Documentation
- Use context7 MCP server to access up-to-date documentation of various libraries
